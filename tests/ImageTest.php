<?php
/**
 * This file is part of the Juvem package.
 *
 * (c) Erik Theoboldt <erik@theoboldt.eu>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */


namespace App\Tests;


use App\Juvimg\Image;
use App\Juvimg\ResizeImageRequest;
use App\Service\Resizer\ImagineResizeService;
use PHPUnit\Framework\TestCase;
use Psr\Log\NullLogger;

class ImageTest extends TestCase
{

    /**
     * Test mime type access
     */
    public function testPngImageMimeType(): void
    {
        $image = new Image(self::provideImageInput());
        $this->assertEquals('image/png', $image->getMimeType());
    }

    /**
     * Provide 16x16 px PNG file
     *
     * @return string
     */
    public static function provideImageInput(): string
    {
        $image = <<<PNG

PNG;

        return base64_decode($image);
    }

    public function testStringCastEmptyData(): void
    {
        $image = new Image(null);
        $this->assertEquals('', (string)$image);
    }

    public function testResourceRead(): void
    {
        $temp = tmpfile();
        fwrite($temp, self::provideImageInput());
        fseek($temp, 0);
        $image = new Image($temp);
        $this->assertEquals(self::provideImageInput(), (string)$image);

        fclose($temp);
    }

    public function testStringCastString(): void
    {
        $image = new Image('test');
        $this->assertEquals('test', (string)$image);
    }
    
    public function testUnexpectedMode(): void
    {
        $temp = tmpfile();
        fwrite($temp, self::provideImageInput());
        fseek($temp, 0);

        $r = new ResizeImageRequest($temp, null, 100, 'unknown', 100);
        $s = new ImagineResizeService(new NullLogger());
        $this->expectException(\RuntimeException::class);
        $this->expectExceptionMessage('Unavailable resize mode requested');
        
        $s->resize($r);
    }

}
